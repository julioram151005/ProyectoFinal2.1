/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.sistemaintecap;

import com.umg.proyect.model.Asignacion;
import com.umg.proyect.model.Grados;
import com.umg.proyect.model.Student;
import com.umg.proyect.model.Teacher;
import com.umg.proyect.model.Curso;
import com.umg.proyect.service.AsignacionService;
import com.umg.proyect.service.GradoService;
import com.umg.proyect.service.StudentService;
import com.umg.proyect.service.CursoService;
import com.umg.proyect.util.SessionManager;
import java.awt.Image;
import java.time.LocalDateTime;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.stream.Collectors;

/**
 *
 * @author usuario
 */
public class Grado extends javax.swing.JFrame {
    private final GradoService gradoService = new GradoService();
    private final StudentService studentService = new StudentService();
    private final CursoService cursoService = new CursoService();
    private final AsignacionService asignacionService = new AsignacionService();
    private DefaultTableModel modelStudent;
    private DefaultTableModel modelGrados;
    private Curso cursoDocente;
    private Cursos back;
    
    
    /**
     * Creates new form Grado
     */
    public Grado() {
        initComponents();
        this.setLocationRelativeTo(this); 
        this.Imagen(this.lblFondo, "src/main/java/img/f.png");
        this.Imagen(this.lblLogo, "src/main/java/img/logo.png");
        

        modelStudent = new DefaultTableModel(new String[]{"ID", "Nombre", "Carnet", "Estado"}, 0);
        jTableStudent.setModel(modelStudent);

        modelGrados = new DefaultTableModel(new String[]{"ID Curso", "ID Estudiante", "Nota", "Tipo", "Fecha"}, 0);
        jTableGrados.setModel(modelGrados);
        cargarDatosDocente();
    }
    public void setBack(Cursos back) {
        this.back = back;
    } 
    private ImageIcon imagen;
    private Icon icono;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableStudent = new javax.swing.JTable();
        lblLogo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNota = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        lblDocente = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableGrados = new javax.swing.JTable();
        lblCurso = new javax.swing.JLabel();
        txtCursoId = new javax.swing.JLabel();
        btnSubir = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtStudentId = new javax.swing.JTextField();
        btnConsultarEstudiantes = new javax.swing.JButton();
        btnConsultarGrados = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTableStudent.setBackground(new java.awt.Color(204, 204, 204));
        jTableStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "NOMBRE", "CARNET", "ESTADO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableStudent);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 720, 120));
        getContentPane().add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 150, 70));

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Estudiantes");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, 380, 70));

        jLabel1.setText("Nota:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 300, 50, -1));

        jLabel3.setText("Tipo de evaluacion:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 300, 130, -1));
        getContentPane().add(txtNota, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 300, 90, -1));
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 300, 80, -1));

        lblDocente.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblDocente.setForeground(new java.awt.Color(255, 255, 255));
        lblDocente.setText("****");
        getContentPane().add(lblDocente, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 170, -1));

        jTableGrados.setBackground(new java.awt.Color(204, 204, 204));
        jTableGrados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "id_curso", "id_student", "nota", "tipo", "createdAt"
            }
        ));
        jScrollPane2.setViewportView(jTableGrados);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 710, 220));

        lblCurso.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblCurso.setForeground(new java.awt.Color(255, 255, 255));
        lblCurso.setText("****");
        getContentPane().add(lblCurso, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, 120, -1));

        txtCursoId.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtCursoId.setForeground(new java.awt.Color(255, 255, 255));
        txtCursoId.setText("****");
        getContentPane().add(txtCursoId, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, 190, -1));

        btnSubir.setText("Subir Notas");
        btnSubir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSubir, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 580, -1, -1));

        jLabel4.setText("ID estudiante:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, -1, -1));
        getContentPane().add(txtStudentId, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 300, 80, -1));

        btnConsultarEstudiantes.setText("Ver Estudiante");
        btnConsultarEstudiantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarEstudiantesActionPerformed(evt);
            }
        });
        getContentPane().add(btnConsultarEstudiantes, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 580, -1, -1));

        btnConsultarGrados.setText("Ver Notas");
        btnConsultarGrados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarGradosActionPerformed(evt);
            }
        });
        getContentPane().add(btnConsultarGrados, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 580, -1, -1));

        btnBack.setText("Regreso");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 30, -1, -1));
        getContentPane().add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 770, 610));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarGradosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarGradosActionPerformed
        consultarGrados();
    }//GEN-LAST:event_btnConsultarGradosActionPerformed

    private void btnConsultarEstudiantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarEstudiantesActionPerformed

        if (cursoDocente != null) {
            consultarEstudiantesPorCurso(cursoDocente.getId());
        } else {
            consultarEstudiantes();
        }
    }//GEN-LAST:event_btnConsultarEstudiantesActionPerformed

    private void btnSubirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubirActionPerformed
        subirGrado();
    }//GEN-LAST:event_btnSubirActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        back.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed
    private void cargarDatosDocente() {
        if ("TEACHER".equals(SessionManager.getUserType())) {
            Teacher teacher = SessionManager.getCurrentTeacher();
            if (teacher != null) {
                lblDocente.setText("Docente: " + teacher.getNombre());
            }
            try {
                cursoDocente = obtenerCursoDocente(teacher.getId());
                if (cursoDocente != null) {
                    lblCurso.setText("Curso: " + cursoDocente.getNombre());
                    txtCursoId.setText(String.valueOf(cursoDocente.getId()));
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al cargar curso: " + e.getMessage());
            }
        }
    }
    private Curso obtenerCursoDocente(int idTeacher) throws Exception {
        List<Curso> cursos = cursoService.getCursos();
        for (Curso curso : cursos) {
            if (curso.getId_teacher() == idTeacher) {
                return curso;
            }
        }
        return null;
    }  
private void subirGrado() {
    try {
        if (txtStudentId.getText().isEmpty() || txtNota.getText().isEmpty() || jTextField1.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor complete todos los campos");
            return;
        }

        if (txtCursoId.getText().equals("****") || txtCursoId.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se encontró curso asignado");
            return;
        }

        Grados g = new Grados();
        g.setId_student(Integer.parseInt(txtStudentId.getText()));
        g.setId_curso(Integer.parseInt(txtCursoId.getText())); 
        g.setNota(Integer.parseInt(txtNota.getText()));
        g.setTipo(jTextField1.getText());
        g.setCreatedAt(LocalDateTime.now().toString()); 

        Grados resultado = gradoService.createGrado(g);

        if (resultado != null) {
            JOptionPane.showMessageDialog(this, "Grado subido correctamente");
            limpiarCampos();
            consultarGrados();
        } else {
            JOptionPane.showMessageDialog(this, "Error al subir grado");
        }

    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Por favor ingrese valores numéricos válidos");
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error al subir grado: " + ex.getMessage());
        ex.printStackTrace();
    }
}
    
    private void consultarEstudiantes() {
        try {
            List<Student> estudiantes = studentService.getStudent();
            modelStudent.setRowCount(0);

            for (Student s : estudiantes) {
                String estado;
                try {
                    // si getEstado() devuelve Boolean o boolean
                    Object e = s.getEstado();
                    if (e instanceof Boolean) {
                        estado = ((Boolean) e) ? "Activo" : "Inactivo";
                    } else {
                        estado = (e != null) ? e.toString() : "Desconocido";
                    }
                } catch (Exception ex) {
                    estado = "Desconocido";
                }

                modelStudent.addRow(new Object[]{s.getId(), s.getNombre(), s.getCarnet(), estado});
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al consultar estudiantes: " + ex.getMessage());
            ex.printStackTrace();
        }
    }    
    private void consultarEstudiantesPorCurso(int idCurso) {
        try {
            List<Asignacion> asignaciones = asignacionService.getAsignacionesPorCurso(idCurso);
            List<Student> todosEstudiantes = studentService.getStudent();

            List<Student> estudiantesFiltrados = todosEstudiantes.stream()
                    .filter(est -> asignaciones.stream()
                            .anyMatch(asig -> asig.getId_student() == est.getId()))
                    .collect(Collectors.toList());

            modelStudent.setRowCount(0);

            for (Student s : estudiantesFiltrados) {
                String estado;
                try {
                    Object e = s.getEstado();
                    if (e instanceof Boolean) estado = ((Boolean) e) ? "Activo" : "Inactivo";
                    else estado = (e != null) ? e.toString() : "Desconocido";
                } catch (Exception ex) {
                    estado = "Desconocido";
                }
                modelStudent.addRow(new Object[]{s.getId(), s.getNombre(), s.getCarnet(), estado});
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al consultar estudiantes: " + ex.getMessage());
            ex.printStackTrace();
        }
    }


    private void consultarGrados() {
        try {
            List<Grados> grados = gradoService.getGrado();
            modelGrados.setRowCount(0);

            if (cursoDocente != null) {
                for (Grados g : grados) {
                    if (g.getId_curso() == cursoDocente.getId()) {
                        modelGrados.addRow(new Object[]{
                            g.getId_curso(),
                            g.getId_student(),
                            g.getNota(),
                            g.getTipo(),
                            g.getCreatedAt() != null ? g.getCreatedAt().toString() : "N/A"
                        });
                    }
                }
            } else {
                for (Grados g : grados) {
                    modelGrados.addRow(new Object[]{
                        g.getId_curso(),
                        g.getId_student(),
                        g.getNota(),
                        g.getTipo(),
                        g.getCreatedAt() != null ? g.getCreatedAt().toString() : "N/A"
                    });
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al consultar grados: " + ex.getMessage());
            ex.printStackTrace();
        }
    } 
    
private void limpiarCampos() {
    txtStudentId.setText("");
    txtNota.setText("");
    jTextField1.setText("");
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Grado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Grado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Grado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Grado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Grado().setVisible(true);
            }
        });
    }
     private void Imagen(JLabel lbl, String ruta){
        this.imagen = new ImageIcon(ruta);
        this.icono = new ImageIcon(
                this.imagen.getImage().getScaledInstance(lbl.getWidth(), 
                        lbl.getHeight(), 
                        Image.SCALE_DEFAULT)
        );
        lbl.setIcon(this.icono);
        this.repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnConsultarEstudiantes;
    private javax.swing.JButton btnConsultarGrados;
    private javax.swing.JButton btnSubir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableGrados;
    private javax.swing.JTable jTableStudent;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblCurso;
    private javax.swing.JLabel lblDocente;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel txtCursoId;
    private javax.swing.JTextField txtNota;
    private javax.swing.JTextField txtStudentId;
    // End of variables declaration//GEN-END:variables
}
